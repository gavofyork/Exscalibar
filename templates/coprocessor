/* Copyright 2003, 2004, 2005, 2007, 2009, 2010 Gavin Wood <gav@kde.org>
 *
 * This file is part of Exscalibar.
 *
 * Exscalibar is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Exscalibar is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Exscalibar.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <Plugin>
using namespace Geddei;

class _NAME_ : public CoProcessor
{
public:
	_NAME_();

private:
	virtual QString simpleText() const { return QChar(0x263C); }
	virtual QColor specifyOutlineColour() const { return QColor::fromHsv(0, 255, 255); }
	virtual PropertiesInfo specifyProperties() const;
	virtual void initFromProperties();
	virtual void updateFromProperties();
	virtual bool verifyAndSpecifyTypes(Types const& _inTypes, Types& _outTypes);
	virtual void specifyInputSpace(QVector<uint>& _s) { _s.fill(1); }
	virtual void requireInputSpace(QVector<uint>& _s) { _s.fill(1); }
	virtual void specifyOutputSpace(QVector<uint>& _s) { _s.fill(1); }
	virtual bool processorStarted();
	virtual int process();
	virtual void processorStopped();

	bool m_example;
	DECLARE_1_PROPERTY(_NAME_, m_example);
};

_NAME_::_NAME_(): CoProcessor("_NAME_")
{
}

PropertiesInfo _NAME_::specifyProperties() const
{
	return PropertiesInfo
		("Example", false, "Example description.", false, "Ã‹");
}

void _NAME_::initFromProperties()
{
	setupIO(1, 1);
	setupVisual(24, 12, 1, 24, 12, true);
}

void _NAME_::updateFromProperties()
{
}

bool _NAME_::verifyAndSpecifyTypes(Types const& _inTypes, Types& _outTypes)
{
	_outTypes[0] = _inTypes[0];
	return _outTypes[0].isA<Spectrum>();
}

bool _NAME_::processorStarted()
{
	return true;
}

int _NAME_::process()
{
	const BufferData in = input(0).readSample();
	BufferData out = output(0).makeScratchSample();
	out[0] = in[0];
	output(0).push(out);
	return DidWork;
}

void _NAME_::processorStopped()
{
}

EXPORT_CLASS(_NAME_, 0,1,0, Processor);


