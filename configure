#!/bin/bash

for option in `echo $@`; do
	if [[ "$(echo "$option" | sed 's/=.*$//')" == "--prefix" ]]; then
		EXSCALIBAR_LOCATION="$(echo "$option" | sed 's/^--prefix=//')"
	fi
done

VERSION=`grep \<version\> exscalibar.kdevelop | grep -E [0-9]+\.[0-9]+\.[0-9]+ | sed s:\ *\</*version\>::g`

echo "/* config.h automatically generated by ./configure:" > ./config.h
echo " * Do not change this file directly." >> config.h
echo " */" >> config.h
echo >> config.h
echo "#define VERSION \"$VERSION\"" >> config.h

echo "# global.pro automatically generated by ./configure:" > ./global.pro
echo "# Do not change this file directly." >> ./global.pro
echo >> ./global.pro

echo OURVERSION = $VERSION >> ./global.pro

echo "    Configuring in $PWD..."
echo
echo "BUILD_ROOT = " $PWD >> ./global.pro

#if [ -z "$QTDIR" ]; then
#	echo "XXX Qt not detected: Set \$QTDIR correctly and rerun."
#	exit
#fi

pkg-config --atleast-version 0.10 newmat
if (( $? && ! "0$HAVE_NEWMAT" )) ; then
	echo "!!! newmat (dev. files) not detected: This package is recommended."
	echo CONFIG -= newmat >> global.pro
else
	echo "    newmat detected. PCA functionality enabled."
	echo CONFIG += newmat >> global.pro
	echo NEWMAT_CPPFLAGS =  >> ./global.pro
	echo NEWMAT_LIBS = -lnewmat >> ./global.pro
fi

pkg-config --atleast-version 1.0.0 sndfile
if (( $? && ! "0$HAVE_SNDFILE" )) ; then
	echo "!!! libsndfile (dev. files) not detected: This package is recommended."
	echo CONFIG -= sndfile >> global.pro
else
	echo "    sndfile detected. Sound file I/O functionality enabled."
	echo CONFIG += sndfile >> global.pro
	echo SNDFILE_CPPFLAGS = `pkg-config sndfile --cflags` >> ./global.pro
	echo SNDFILE_LIBS = `pkg-config sndfile --libs` >> ./global.pro
fi

pkg-config --atleast-version 1.0.0 vorbisfile
if (( $? && ! "0$HAVE_VORBSIFILE" )) ; then
	echo "!!! libvorbisfile (dev. files) not detected: This package is recommended"
	echo CONFIG -= vorbisfile >> global.pro
else
	echo "    libvorbisfile detected. Ogg Vorbis stream decoding enabled."
	echo CONFIG += vorbisfile >> global.pro
	echo VORBISFILE_CPPFLAGS = `pkg-config vorbisfile --cflags` >> ./global.pro
	echo VORBISFILE_LIBS = `pkg-config vorbisfile --libs` >> ./global.pro
fi

pkg-config --atleast-version 0.15 mad
if (( $? && ! "0$HAVE_MAD" )) ; then
	echo "!!! libmad (dev. files) not detected: This package is recommended."
	echo CONFIG -= mad >> global.pro
else
	echo "    libmad detected. MPEG audio stream decoding enabled."
	echo CONFIG += mad >> global.pro
	echo MAD_CPPFLAGS = `pkg-config mad --cflags` >> ./global.pro
	echo MAD_LIBS = `pkg-config mad --libs` >> ./global.pro
fi

pkg-config --atleast-version 3.0.0 fftw3f
if (( $? && ! "0$HAVE_FFTW3" )) ; then
	echo "!!! FFTW not detected: This package is recommended."
	echo CONFIG -= fftw >> global.pro
else
	echo "    FFTW detected. Accellerated transforms enabled."
	echo CONFIG += fftw >> global.pro
	echo FFTW_CPPFLAGS = `pkg-config fftw3f --cflags` >> ./global.pro
	echo FFTW_LIBS = `pkg-config fftw3f --libs` >> ./global.pro
fi

pkg-config --atleast-version 0.90.0 jack
if (( $? && ! "0$HAVE_JACK" )) ; then
	echo "*** Jack not detected: Building without Jack support."
	echo CONFIG -= jack >> global.pro
else
	echo "    Jack detected. Jack interconnections enabled."
	echo CONFIG += jack >> global.pro
	echo JACK_CPPFLAGS = `pkg-config jack --cflags` >> ./global.pro
	echo JACK_LIBS = `pkg-config jack --libs` >> ./global.pro
fi

pkg-config --atleast-version 0.9 alsa
if (( $? && ! "0$HAVE_ALSA" )) ; then
	echo "*** Alsa not detected: Building without Alsa support."
	echo CONFIG -= alsa >> global.pro
else
	echo "    ALSA detected. ALSA soundcard I/O enabled."
	echo CONFIG += alsa >> global.pro
	echo ALSA_CPPFLAGS = `pkg-config alsa --cflags` >> ./global.pro
	echo ALSA_LIBS = `pkg-config alsa --libs` >> ./global.pro
fi

if [ -x $GAT_LOCATION/bin/gat-config ] ; then
	echo CONFIG += gat >> ./global.pro
	echo GAT_CPPFLAGS = `$GAT_LOCATION/bin/gat-cpp-config --cppflags` >> ./global.pro
	echo GAT_LIBS = `$GAT_LOCATION/bin/gat-cpp-config --libs | sed s:-luuid:$GAT_LOCATION/lib/libuuid.so:` >> ./global.pro
	echo "    Found GAT. Grid functionality enabled."
else
	echo CONFIG -= gat >> ./global.pro
	echo "    Cannot find GAT. Grid functionality disabled."
fi

if [ -n "$EXSCALIBAR_LOCATION" ]; then
	PREFIX=$EXSCALIBAR_LOCATION
elif [ -z "$QTDIR" ]; then
	PREFIX="/usr"
else
	PREFIX=$QTDIR
fi

echo
echo "    Using $PREFIX as the installation prefix."
echo "PREFIX = " $PREFIX >> ./global.pro

cat system/exscalibar.pc.tmpl > system/exscalibar.pc
echo "Version:" ${VERSION} >> system/exscalibar.pc
echo "Libs:" -L${EXSCALIBAR_LOCATION}/lib -lqtextra -lgeddei -lrgeddei >> system/exscalibar.pc
echo "Cflags:" -fexceptions -I${EXSCALIBAR_LOCATION}/include >> system/exscalibar.pc

cat global.tmpl >> ./global.pro

echo "    Distilling Makefiles..."
for FILE in ./exscalibar.pro `find system src | grep \\\.pro | grep -v \\\.~`; do
	if [[ $FILE != ./global*.pro ]]; then
#	echo "Processing $FILE"
	FP=$(echo $FILE | sed s/\\/[a-z0-9]*\\.pro//)
	qmake -makefile -o "$FP/Makefile" "$FILE"
	perl -i -p -e "s/([^\\/]|^)global.pro/\$1/gc" "$FP/Makefile"
	perl -i -p -e "s/([^\\.]|^)\\.\\/global.pro/\$1/gc" "$FP/Makefile"
#	perl -i -p -e "s/^MOC\\s+=\\s+\\\$\\(QTDIR\\)\\/bin\\/moc$/MOC = moc/g" "$FP/Makefile"
#	perl -i -p -e "s/\\.[a-z]+: \\\$\\(MOC\\)/.moc:/g" "$FP/Makefile"
	fi
done

echo
echo "All configured :-)"
echo "Now type make && su -c make install to build and install Exscalibar."
if [ "$PREFIX" != "$QTDIR" ]; then if [ "$PREFIX" != "/usr" ]; then
	echo "========================================================="
	echo "==                                                       "
	echo "==        WARNING: prefix is different to \$QTDIR        "
	echo "==                                                       "
	echo "== Your Exscalibar install will be broken unless you     "
	echo "== introduce a system-wide shell environment variable to "
	echo "== direct Exscalibar where to find its plugins. This     "
	echo "== variable is called EXSCALIBAR_LOCATION and must be in "
	echo "== the default environment of every Exscalibar user.     "
	echo "== The easiest way to do this is to put the following    "
	echo "== line into /etc/profile or your distribution's         "
	echo "== equivalent file:                                      "
	echo "==                                                       "
	echo "== export EXSCALIBAR_LOCATION=</real/exscalibar/prefix>  "
	echo "==                                                       "
	echo "== If you do not intend to move the files from where     "
	echo "== this installation places them then use:               "
	echo "==                                                       "
	echo "== export EXSCALIBAR_LOCATION=$PREFIX"
	echo "==                                                       "
	echo "========================================================="
fi; fi

